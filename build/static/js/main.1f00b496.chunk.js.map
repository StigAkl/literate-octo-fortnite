{"version":3,"sources":["Components/Character.js","Components/Characters.js","App.js","api/api-service.js","serviceWorker.js","index.js"],"names":["Character","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","item","infoClass","rarity","toLowerCase","bgStyle","backgroundImage","concat","image","backgroundRepeat","backgroundSize","height","marginLeft","lastSeen","Date","formatted_date","getDate","getMonth","getFullYear","react_default","a","createElement","Fragment","className","style","name","src","alt","price","toFixed","Component","Characters","itemList","PropsRoute","_ref","component","rest","objectWithoutProperties","react_router","assign","render","routeProps","_len","arguments","length","Array","_key","finalProps","apply","React","renderMergedProps","App","state","items","_this2","callback","API_URL","process","REACT_APP_API_URL","config","useDatabase","axios","get","then","result","data","catch","err","console","log","fetchAllItems","setState","backgroundColor","map","index","key","id","Components_Character","styleting","react_router_dom","App_PropsRoute","path","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f00b496.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"../assets/default.css\"\r\n\r\nclass Character extends Component {\r\n    constructor(props) {\r\n        super(props); \r\n        this.item = this.props.item; \r\n    }\r\n\r\n    render() {\r\n        const rarity = this.item.rarity;\r\n        const infoClass = \"info-box background-\" + rarity.toLowerCase();\r\n\r\n        const bgStyle = {\r\n            backgroundImage: `url(${this.item.image})`,\r\n            backgroundRepeat: \"no-repeat\",\r\n            backgroundSize: \"auto 100%\",\r\n            height: \"83%\",\r\n            marginLeft: \"-33%\"\r\n        }\r\n        \r\n        const months = [\"JAN\", \"FEB\", \"MAR\",\"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n        const lastSeen = new Date(this.item.lastSeen); \r\n        const formatted_date = lastSeen.getDate() + \". \" + months[lastSeen.getMonth()] + \" \" + lastSeen.getFullYear(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n            <div className='col-md-2 item'>\r\n                \r\n                <div style={bgStyle} className='bgimage'></div>\r\n\r\n                <div className={infoClass}>\r\n                    <div className=\"name\">{this.item.name}</div>\r\n                    <div className=\"price\">\r\n                        <img src=\"https://gamepedia.cursecdn.com/fortnite_gamepedia/f/f3/V-bucks_icon.png?version=970070f7945ee6930b14d520ec1f59b7\" alt={this.item.name} className=\"vbuckIcon\"></img>\r\n                            {this.item.price.toFixed(0)}\r\n                    </div>\r\n                    <div className=\"last-seen\">Last seen: {formatted_date}</div>\r\n                </div>\r\n            </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Character;","import React from 'react';\r\n\r\n\r\nconst Characters = (props) => {\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            {props.itemList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Characters;","import React, {Component} from 'react';\r\nimport Character from './Components/Character'; \r\nimport Characters from './Components/Characters'; \r\nimport { fetchAllItems } from \"./api/api-service\";\r\nimport {BrowserRouter, Route} from 'react-router-dom'; \r\n\r\nconst renderMergedProps = (component, ...rest) => {\r\n  const finalProps = Object.assign({}, ...rest);\r\n  return (\r\n    React.createElement(component, finalProps)\r\n  );\r\n}\r\n\r\nconst PropsRoute = ({ component, ...rest }) => {\r\n  return (\r\n    <Route {...rest} render={routeProps => {\r\n      return renderMergedProps(component, routeProps, rest);\r\n    }}/>\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n    this.state = {\r\n      items: []\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    fetchAllItems((result) => {\r\n      this.setState({\r\n        items: result\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.items);\r\n    const style={\r\n      backgroundColor: \"#ff0000\"\r\n    }\r\n\r\n    const items = this.state.items; \r\n    let itemList = items.length ? (\r\n      <div className=\"row justify-content-center\">\r\n        {items.map((item, index) => {\r\n          return (\r\n            <React.Fragment key={item.id}>\r\n                <Character styleting={style} item={item} />\r\n            </React.Fragment>\r\n          )\r\n        })}\r\n\r\n      </div>\r\n    ) : <p>Ingen data..</p>\r\n\r\n  return (\r\n\r\n    <div>\r\n      <BrowserRouter>\r\n        <PropsRoute path=\"/home\" component={Characters} itemList={itemList} />\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;","import axios from \"axios\"; \r\nimport config from '../config.json'; \r\nimport items from './dummy.json'; \r\n\r\nexport const fetchAllItems = callback => {\r\n    \r\n    const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:3001/api/items\"\r\n    if(config.useDatabase) {\r\n        axios.get(API_URL).then((result) => {\r\n            callback(result.data); \r\n        }).catch((err) => {\r\n            console.log(err); \r\n        });\r\n    } \r\n    else {\r\n        callback(items); \r\n    }\r\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}