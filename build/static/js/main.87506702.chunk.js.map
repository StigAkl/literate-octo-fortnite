{"version":3,"sources":["assets/imgs/kk.jpg","Components/Character.js","Components/Characters.js","Components/AddItem.js","App.js","api/api-service.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Character","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","item","bgStyle","backgroundImage","concat","kkk","backgroundRepeat","backgroundSize","height","react_default","a","createElement","Fragment","className","style","name","price","toFixed","available","Component","Characters","console","log","itemList","AddItem","state","rarity","lastSeen","PropsRoute","_ref","component","rest","objectWithoutProperties","react_router","assign","render","routeProps","_len","arguments","length","Array","_key","finalProps","apply","React","renderMergedProps","App","items","_this2","callback","push","id","i","Math","random","fetchAllItems","result","setState","backgroundColor","map","index","key","Components_Character","styleting","react_router_dom","App_PropsRoute","path","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87506702.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kk.3c8db120.jpg\";","import React, { Component } from 'react';\r\nimport \"../assets/default.css\"\r\nimport kkk from \"../assets/imgs/kk.jpg\"\r\n\r\nclass Character extends Component {\r\n    constructor(props) {\r\n        super(props); \r\n        this.item = this.props.item; \r\n    }\r\n\r\n    render() {\r\n\r\n        const bgStyle = {\r\n            backgroundImage: `url(${kkk})`,\r\n            backgroundRepeat: \"no-repeat\",\r\n            backgroundSize: \"auto 100%\",\r\n            height: \"83%\"\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n            <div className='col-md-3 item'>\r\n                \r\n                <div style={bgStyle} className='bgimage'></div>\r\n\r\n                <div className=\"info-box\" >\r\n                    <p className=\"name\">{this.item.name}</p>\r\n                    <p className=\"price\">V-bucks: {this.item.price.toFixed(0)}</p>\r\n                    <p className=\"last-seen\">Last seen: {this.item.available}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-1 col-md-offset-1\"></div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Character;","import React from 'react';\r\n\r\nconst Characters = (props) => {\r\n    console.log(\"charas\")\r\n    console.log(props); \r\n    return (\r\n        <div className=\"container\">\r\n            {props.itemList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Characters;","import React, { Component } from 'react';\r\n\r\nclass AddItem extends Component {\r\n\r\n    state = {\r\n        name: \"\", \r\n        rarity: \"\", \r\n        lastSeen: null, \r\n        price: null\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Add item here..</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddItem;","import React, {Component} from 'react';\r\nimport Character from './Components/Character'; \r\nimport Characters from './Components/Characters'; \r\nimport AddItem from './Components/AddItem'; \r\nimport {fetchAllItems} from \"./api/api-service\";\r\nimport {BrowserRouter, Route} from 'react-router-dom'; \r\n\r\nconst renderMergedProps = (component, ...rest) => {\r\n  const finalProps = Object.assign({}, ...rest);\r\n  return (\r\n    React.createElement(component, finalProps)\r\n  );\r\n}\r\n\r\nconst PropsRoute = ({ component, ...rest }) => {\r\n  return (\r\n    <Route {...rest} render={routeProps => {\r\n      return renderMergedProps(component, routeProps, rest);\r\n    }}/>\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n    \r\n    this.state = {\r\n      items: []\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    console.log(\"Hello\"); \r\n    fetchAllItems((result) => {\r\n      this.setState({\r\n        items: result\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const style={\r\n      backgroundColor: \"#ff0000\"\r\n    }\r\n    const items = this.state.items; \r\n\r\n    let itemList = items.length ? (\r\n      <div className=\"row\">\r\n\r\n        {items.map((item, index) => {\r\n          return (\r\n            <React.Fragment key={item.id}>\r\n                <Character styleting={style} item={item} />\r\n            </React.Fragment>\r\n          )\r\n        })}\r\n\r\n      </div>\r\n    ) : <p>Ingen data..</p>\r\n\r\n    const charStyle = {\r\n      backgroundColor: \"#00ccff\"\r\n    }\r\n\r\n  return (\r\n\r\n    <BrowserRouter>\r\n      <PropsRoute path=\"/home\" component={Characters} itemList={itemList} />\r\n      <PropsRoute path=\"/add-item\" component={AddItem} />\r\n    </BrowserRouter>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;","import axios from \"axios\"; \r\n\r\n\r\nexport const fetchAllItems = callback => {\r\n    let items = []; \r\n\r\n    let aerial = {\r\n        id: 14124124, \r\n        name: \"Aerial Threat\", \r\n        price: 1200,\r\n        available: \"1992\" \r\n    }\r\n\r\n    items.push(aerial); \r\n\r\n    for(let i = 0; i < 20; i++) {\r\n        let item = {\r\n            id: i,\r\n            name: \"Test\" + i,\r\n            price: Math.random() * 5000,\r\n            available: \"1992\"\r\n        }\r\n\r\n        items.push(item); \r\n    }\r\n\r\n    callback(items); \r\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}